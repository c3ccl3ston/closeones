[{"C:\\Users\\chris\\git\\close-college-football-app\\src\\index.js":"1","C:\\Users\\chris\\git\\close-college-football-app\\src\\CloseGame.js":"2","C:\\Users\\chris\\git\\close-college-football-app\\src\\App.tsx":"3"},{"size":151,"mtime":1608963606136,"results":"4","hashOfConfig":"5"},{"size":837,"mtime":1609146219155,"results":"6","hashOfConfig":"5"},{"size":6588,"mtime":1609202333658,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1gil0bg",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"17"},"C:\\Users\\chris\\git\\close-college-football-app\\src\\index.js",[],["18","19"],"C:\\Users\\chris\\git\\close-college-football-app\\src\\CloseGame.js",[],["20","21"],"C:\\Users\\chris\\git\\close-college-football-app\\src\\App.tsx",["22","23"],"import React, { useEffect, useState } from 'react';\r\nimport CloseGame from './CloseGame';\r\nimport \"./App.css\";\r\nimport { Container, NavDropdown } from 'react-bootstrap';\r\nimport { Nav, Navbar } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\ninterface Team {\r\n    id: number;\r\n    school: string;\r\n    mascot: string;\r\n    abbreviation: string;\r\n    alt_name1: string;\r\n    alt_name2: string;\r\n    alt_name3: string;\r\n    conference: string;\r\n    division: string;\r\n    color: string;\r\n    alt_color: string;\r\n    logos: string[];\r\n}\r\n\r\ninterface Game {\r\n    id: number;\r\n    season: number;\r\n    week: number;\r\n    season_type: string;\r\n    start_date: string;\r\n    start_time_tbd: boolean;\r\n    neutral_site: boolean;\r\n    conference_game: boolean;\r\n    attendance: number;\r\n    venur_id: number;\r\n    venue: string;\r\n    home_id: number;\r\n    home_team: string;\r\n    home_conference: string;\r\n    home_points: number;\r\n    home_line_scores: number[];\r\n    home_post_win_prob: string;\r\n    away_id: number;\r\n    away_team: string;\r\n    away_conference: string;\r\n    away_points: number;\r\n    away_line_scores: number[];\r\n    away_post_win_prob: string;\r\n    excitement_index: string;\r\n}\r\n\r\ninterface Week {\r\n    season: string;\r\n    week: number;\r\n    seasonType: string;\r\n    firstGameStart: string;\r\n    lastGameStart: string;\r\n}\r\n\r\nconst App = () => {\r\n    const yearsToFetch: number[] = [2015,2016,2017,2018,2019,2020];\r\n    const [weeks, setWeeks] = useState<any>([]);\r\n    const [closeGames, setCloseGames] = useState<any>([]);\r\n    const [seasonTitle, setSeasonTitle] = useState(\"\");\r\n    const [weekTitle, setWeekTitle] = useState(\"\");\r\n    const [teams, setTeams] = useState<any>([]);\r\n\r\n    useEffect(() => {\r\n        const getAllTeams = async () => {\r\n            const response = await fetch(`https://api.collegefootballdata.com/teams`);\r\n            const data = await response.json();\r\n            setTeams(data as Team[]);\r\n        }\r\n\r\n        const getCalendar = async () => {\r\n            const d = [];\r\n            var seasonType;\r\n            var week;\r\n\r\n            for (var i = 0; i < yearsToFetch.length; i++) {\r\n                const response = await fetch(\"https://api.collegefootballdata.com/calendar?year=\" + yearsToFetch[i]);\r\n                const data = await response.json();\r\n\r\n                d.push(data);\r\n\r\n                if (i === yearsToFetch.length - 1) {\r\n                    seasonType = data[data.length - 1].seasonType;\r\n                    week = data[data.length - 1].week;\r\n                }\r\n            }\r\n\r\n            setWeeks(d);\r\n\r\n            getCloseGames(seasonType, week, yearsToFetch[yearsToFetch.length - 1]);\r\n        }\r\n        getCalendar();\r\n        getAllTeams();\r\n    }, []);\r\n\r\n    const getCloseGames = async (seasonType: string, week: number, year: number) => {\r\n        const response = await fetch(`https://api.collegefootballdata.com/games?year=${year}&week=${week}&seasonType=${seasonType}`);\r\n        const data = await response.json();\r\n\r\n        const closeOnes: Game[] | ((prevState: Game[]) => Game[]) = [];\r\n\r\n        Object.keys(data).forEach(key => {\r\n            const homeScore = data[key].home_points;\r\n            const awayScore = data[key].away_points;\r\n\r\n            if (awayScore !== null && homeScore !== null) {\r\n                if (Math.abs(homeScore - awayScore) <= 10) {\r\n                    closeOnes.push(data[key]);\r\n                }\r\n            }\r\n        });\r\n\r\n        closeOnes.sort(function (a, b) {\r\n            return +b.excitement_index - +a.excitement_index;\r\n        });\r\n        setCloseGames(closeOnes);\r\n        setWeekTitle(getWeekTitle(seasonType, week));\r\n        setSeasonTitle(getSeasonTitle(seasonType, year));\r\n        window.scrollTo(0, 0);\r\n    }\r\n\r\n    const getWeekTitle = (seasonType: string, week: number) => {\r\n        if (seasonType === 'postseason') {\r\n            return \"Bowls\";\r\n        } else {\r\n            return \"Week \" + week;\r\n        }\r\n    }\r\n\r\n    const getSeasonTitle = (seasonType: string, year: number) => {\r\n        if (seasonType === 'postseason') {\r\n            return \"\" + year;\r\n        } else {\r\n            return year + \" Regular Season\";\r\n        }\r\n    }\r\n\r\n    const getMenuTitle = (year: number) => {\r\n        return year + \" Season\";\r\n    }\r\n\r\n    const getYearWeeks = (index: number) => {\r\n        if (weeks.length === 0) {\r\n            return;\r\n        } else {\r\n            return (\r\n                <NavDropdown id={getId(yearsToFetch[index])} title={getMenuTitle(yearsToFetch[index])} key={getId(yearsToFetch[index])} className=\"year-dropdown\">\r\n\r\n                    {weeks[index].map((week: { firstGameStart: string | number | null | undefined; seasonType: string; week: number; }, i: any) => (\r\n                        <Nav.Link key={week.firstGameStart} eventKey className=\"weekOfYear\"\r\n                            onClick={() => getCloseGames(week.seasonType, week.week, yearsToFetch[index])}\r\n                            >{getWeekTitle(week.seasonType, week.week)}</Nav.Link>\r\n                    ))\r\n                    }\r\n\r\n                </NavDropdown>\r\n            )\r\n        }\r\n    }\r\n\r\n    const getId = (year: number) => {\r\n        return year + \"season\";\r\n    }\r\n\r\n    return (\r\n        <Container className=\"main\">\r\n            <Navbar expand=\"xl\" collapseOnSelect >\r\n                <Navbar.Brand className=\"title\">Close Ones</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n\r\n                        {\r\n                            weeks.map((week: any, index: any) => (\r\n                                getYearWeeks(index)\r\n                            ))\r\n                        }\r\n\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n            <Container>\r\n                <span className=\"week-header-season-type\">{seasonTitle}</span>\r\n                <h2 className=\"week-header\">{weekTitle}</h2><hr />\r\n\r\n                {closeGames.map((closeGame: Game) => (\r\n                    <CloseGame\r\n                        key={closeGame.id}\r\n                        awayTeam={closeGame.away_team}\r\n                        homeTeam={closeGame.home_team}\r\n                        awayId={closeGame.away_id}\r\n                        homeId={closeGame.home_id}\r\n                        teams={teams} />\r\n                ))}\r\n            </Container>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default App;\r\n",["24","25"],{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"26","replacedBy":"30"},{"ruleId":"28","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":50,"column":11,"nodeType":"34","messageId":"35","endLine":50,"endColumn":15},{"ruleId":"36","severity":1,"message":"37","line":96,"column":8,"nodeType":"38","endLine":96,"endColumn":10,"suggestions":"39"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],["40"],["41"],"@typescript-eslint/no-unused-vars","'Week' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getCloseGames' and 'yearsToFetch'. Either include them or remove the dependency array.","ArrayExpression",["42"],"no-global-assign","no-unsafe-negation",{"desc":"43","fix":"44"},"Update the dependencies array to be: [getCloseGames, yearsToFetch]",{"range":"45","text":"46"},[2766,2768],"[getCloseGames, yearsToFetch]"]
